
import sys
import csv
import string
import pandas as pd

#check for command line arguments

if len (sys.argv) != 3:                                        
    print ("Please give only flp list and mentor list")
    exit()

#save the csv files in a dataframe

flpdf = pd.read_csv (sys.argv[1])
flpdf['match'] = False
mentordf = pd.read_csv (sys.argv[2])
mentordf['match'] = False
matches = pd.DataFrame (columns = ['flpid', 'mentorid', 'permatch'])
scores = pd.DataFrame (columns = ['mentorid', 'score'])


#convert the timezones to an int
for index, row in flpdf.iterrows():
    row ['timezone'] = int (row ['timezone'] )
        
for index, row in mentordf.iterrows():
    row ['timezone'] = int (row ['timezone'] )   


while (True):
    for index, row in flpdf.iterrows():
        if row ['match'] == True:
            continue
        bu = 0
        d = 0
        p = 0
        t = 0
        highest = 0
        match = []
        scores = scores [0:0]
        
        for index2, row2 in mentordf.iterrows():
            bu = 0
            d = 0
            p = 0
            t = 0
            if row ['business unit'].lower() == row2 ['business unit'].lower():
                bu = 1
            if row ['department'].lower() == row2 ['department'].lower():
                d = 1
            if row ['preference'].lower() == row2 ['department'].lower():
                p = 1
            t =  1 - (abs (row ['timezone'] - row2 ['timezone']) / 5) 
            if t > 1 or t < 0:
                score = 1
                scores = scores.append ({'mentorid': str (row2 ['email']), 'score': int (score) }, ignore_index = True)
                continue
            
            score = (0.1*(t) + 0.5*(p) + 0.2*(d) + 0.2 * (bu) ) * 100
            scores = scores.append ({'mentorid': str (row2 ['email']), 'score': int (score) }, ignore_index = True)
                
                
            if score > highest:
                highest = score
                bestmentormatch = row2
                    
          
        scores.sort_values (by = ['score', 'mentorid'], inplace = True, ascending = False)  
        if len (bestmentormatch) != 0 and highest != 0:
           
            # if the mentor does not have an existing match
            
            if mentordf.loc[mentordf['email'] == str(bestmentormatch ['email'])] ['match'].item() == False:
                mentordf.loc [mentordf['email'] == str(bestmentormatch ['email']), 'match'] = True
                flpdf.loc [flpdf['email'] == str(row ['email']), 'match'] = True
                matches = matches.append({'flpid': str (row ['email']), 'mentorid': str( bestmentormatch ['email'] ), 'permatch': int (highest)}, ignore_index = True)
                continue
            
            # if the mentor has a match 
            
            if mentordf.loc[mentordf['email'] == str(bestmentormatch ['email'])] ['match'].item() == True:
                if matches.loc [matches['mentorid'] == str (bestmentormatch ['email'])]['permatch'].item() < scores.loc [scores['mentorid'] == str (bestmentormatch ['email'])] ['score'].item():
                    temp = matches.loc [matches['mentorid'] == str (bestmentormatch ['email'])]['flpid'].item()
                    flpdf.loc [flpdf ['email'] == str (temp), 'match'] = False
                    flpdf.loc [flpdf['email'] == str(row ['email']), 'match'] = True
                    matches.loc [matches ['mentorid'] == str (bestmentormatch ['email']), 'flpid'] = row ['email']
                    matches.loc [matches ['mentorid'] == str (bestmentormatch ['email']), 'permatch'] = scores.loc [scores['mentorid'] == str (bestmentormatch ['email'])] ['score'].item()
                    continue
                if matches.loc [matches['mentorid'] == str (bestmentormatch ['email'])]['permatch'].item() >= scores.loc [scores['mentorid'] == str (bestmentormatch ['email'])] ['score'].item():
                    for index, rows in scores.iterrows():
                        if mentordf.loc [mentordf ['email'] == str (rows ['mentorid'])]['match'].item() == False:
                            mentordf.loc [mentordf ['email'] == str (rows ['mentorid']), 'match' ] = True
                            flpdf.loc [flpdf ['email'] == str (row ['email']), 'match'] = True
                            matches = matches.append({'flpid': str (row ['email']), 'mentorid': str( rows ['mentorid'] ), 'permatch': int (rows['score'])}, ignore_index = True)
                            break
                        if matches.loc [matches['mentorid'] == str (rows ['mentorid'])]['permatch'].item() >= rows ['score']:
                            continue
                
# check that all mentors or FLPs are matched
    if flpdf.match.all() == True : 
        print ('All FLPs matched')
        break
    if mentordf.match.all() == True :
        print ('All mentors matched')
        break

# save the output file as a csv
matches.sort_values (by = ['permatch', 'flpid'], inplace = True, ascending = False)
matches.reset_index(drop = True)
matches.to_csv ('matches.csv')
    
            
